server.port=8888
#spring.profiles.include=social, prod
spring.profiles.include=social, dev

#h2 console
#spring.h2.console.enabled=true
#spring.h2.console.settings.web-allow-others=true
#spring.h2.console.path=/h2-console
#h2 db
#spring.datasource.url=jdbc:h2:~/carrot;AUTO_SERVER=true
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect4
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

#jpa
spring.jpa.open-in-view=false
spring.jpa.defer-datasource-initialization= true

spring.main.allow-bean-definition-overriding=true

#show sql
#system.print.out으로 출력
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.format_sql=true
#logger로 출력
#logging.level.org.hibernate.SQL=debug: debug
#sql문에서 (?)들이 bindingparameter = "실제값"으로 나옴.
#logging.level.org.hibernate.type.descriptor.sql=trace
#JPQL 보기
#spring.jpa.properties.hibernate.use_sql_comments = true
#P6spy
decorator.datasource.p6spy.enable-logging = true

#errors
server.error.include-exception=true
server.error.include-message=always
server.error.include-stacktrace=always
server.error.include-binding-errors=always
spring.messages.basename=errors

#spring batch
#batch 스키마-table 자동 생성 (always/never)
spring.batch.jdbc.initialize-schema=never
#시작과 동시에 batch 실행되는 것 방지
spring.batch.job.enabled=false
#jdbc batch
spring.jpa.properties.hibernate.jdbc.batch_size= 100
